version: 2.1
orbs:
  slack: circleci/slack@3.4.2

jobs:
  build:
    docker:
      - image: 218546966473.dkr.ecr.us-east-1.amazonaws.com/circle-ci:stitch-tap-tester-uv
    steps:
      - checkout
      - run:
          name: 'Setup virtual env'
          command: |
            uv venv --python 3.9 /usr/local/share/virtualenvs/tap-mambu
            source /usr/local/share/virtualenvs/tap-mambu/bin/activate
            uv pip install -U 'pip<19.2' 'setuptools<51.0.0'
            uv pip install .[dev]
            uv pip install .[mambu-tests]
      - slack/notify-on-failure:
          only_for_branches: master
      - run:
          name: 'Unit Tests'
          command: |
            source /usr/local/share/virtualenvs/tap-mambu/bin/activate
            uv pip install pytest coverage  parameterized
            coverage run -m pytest tests/unittests
      - store_test_results:
          path: test_output/report.xml
      - store_artifacts:
          path: htmlcov
      - run:
          name: 'Run Integration Tests'
          no_output_timeout: 30m
          command: |
            source /usr/local/share/virtualenvs/tap-tester/bin/activate
            uv pip install --upgrade awscli
            aws s3 cp s3://com-stitchdata-dev-deployment-assets/environments/tap-tester/tap_tester_sandbox /usr/local/share/virtualenvs/dev_env.sh
            source /usr/local/share/virtualenvs/dev_env.sh
            mkdir /tmp/${CIRCLE_PROJECT_REPONAME}
            export STITCH_CONFIG_DIR=/tmp/${CIRCLE_PROJECT_REPONAME}
            circleci tests glob "tests/test_*.py" | circleci tests split > ./tests-to-run
            if [ -s ./tests-to-run ]; then
              for test_file in $(cat ./tests-to-run)
              do
                echo $test_file > $STITCH_CONFIG_DIR/tap_test.txt
                run-test --tap=${CIRCLE_PROJECT_REPONAME} $test_file
              done
            fi
      - slack/notify-on-failure:
          only_for_branches: master
      - store_artifacts:
          path: /tmp/tap-mambu

workflows:
  version: 2
  commit:
    jobs:
      - build:
          context:
            - circleci-user
            - tier-1-tap-user
  build_daily:
    triggers:
      - schedule:
          cron: "0 1 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - build:
          context:
            - circleci-user
            - tier-1-tap-user
